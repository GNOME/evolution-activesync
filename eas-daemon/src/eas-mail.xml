<?xml version="1.0" encoding="UTF-8" ?>

<node>
<!--
  <interface name="org.meego.Eas">
-->
  <interface name="org.meego.activesyncd.EasMail">

<!--
  Start:Interfaces for testing only 
-->
    <method name="start_sync">
      <arg type="i" name="new_value" direction="in"/>
    </method>

    <method name="test_001">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
      <arg type="s" name="ret_str" direction="out" />
    </method>
<!--
  End:Interfaces for testing only 
-->


<!--
 sync entire EMAIL folder hierarchy (folder structure only, not contents)
 EAS only allows sync of entire hierarchy (inc email, contacts...) so daemon will need to filter to ‘email’ type folders
 will use AS FolderSync command	
-->

    <method name="sync_email_folder_hierarchy">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
      <arg type="t" name="account_uid" direction="in"/>	<!-- t == UINT64-->
      <arg type="s" name="sync_key" direction="in"/>
      <arg type="s" name="ret_sync_key" direction="out"/>
      <arg type="as" name="ret_created_folder_array" direction="out"/>
      <arg type="as" name="ret_deleted_folder_array" direction="out"/>
      <arg type="as" name="ret_updated_folder_array" direction="out"/>
    </method>

<!-- 2-way sync of specified email folder. This will sync email headers only, not bodies will use AS 'Sync' command -->
    <method name="sync_folder_email">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
      <arg type="t" name="account_uid" direction="in"/>
      <arg type="s" name="sync_key" direction="in"/>
      <arg type="s" name="collection_id" direction="in"/>
      <arg type="s" name="ret_sync_key" direction="out"/>
      <arg type="b" name="ret_more_available" direction="out"/> 

      <arg type="as" name="ret_added_email_array" direction="out"/>
      <arg type="as" name="ret_deleted_email_array" direction="out"/>
      <arg type="as" name="ret_changed_email_array" direction="out"/>
    </method>

<!-- used by clients to fetch email bodies and attachments -->
    <method name="fetch_email_body">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
   	<arg type="t" name="account_uid" direction="in"/>
	<arg type="s" name="collection_id" direction="in"/>
	<arg type="s" name="server_id" direction="in"/>		<!-- id of email to fetch body for, eg 5:2 -->
	<arg type="s" name="mime_directory" direction="in"/><!-- directory where email body file should be written. Name of file should match server_id -->
    </method>

    <method name="fetch_attachment">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
   	<arg type="t" name="account_uid" direction="in"/>
	<arg type="s" name="file_reference" direction="in"/>	<!-- filereference of attachment to get -->
	<arg type="s" name="mime_directory" direction="in"/><!-- directory where email body file should be written. Name of file should match server_id -->
    </method>


<!-- used by clients to send MIME-formatted e-mail messages to the server -->
    <method name="send_email">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
      <arg type="t" name="account_uid" direction="in"/>
      <arg type="s" name="clientid" direction="in"/>
      <arg type="s" name="mime_file" direction="in"/>

    </method>

  <!-- TODO: MoveItem -->
	<method name="delete_email">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
      <arg type="t" name="account_uid" direction="in"/>
      <arg type="s" name="sync_key" direction="in"/>
      <arg type="s" name="folder_id" direction="in"/>		
      <arg type="s" name="server_id" direction="in"/>		
      <arg type="s" name="ret_sync_key" direction="out"/> 
	</method>

  </interface>
</node>

